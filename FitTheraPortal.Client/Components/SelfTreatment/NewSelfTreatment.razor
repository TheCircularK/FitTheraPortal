@using FitTheraPortal.Client.Components.Exercise
@using FitTheraPortal.Client.Dtos.CreateItems
@using MudBlazor.Extensions

@inject IDialogService DialogService

<div class="input-group">
    <MudTextField Label="Title" @bind-Value="_selfTreatment.Title"></MudTextField>
    <br/>
    <MudDatePicker Label="Date Due" bind-Date="_selfTreatment.DueDate"></MudDatePicker>
    <br />
</div>

<label>Exercises:</label>
<MudButton OnClick="ShowNewExerciseDialog">Add Exercise</MudButton>

@foreach (var exercise in _selfTreatment.Exercises)
{
    <div>@exercise.Title</div>
}

<MudButton Color="Color.Primary" OnClick="SaveAndReturn">Save</MudButton>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    
    private NewSelfTreatmentDto _selfTreatment = new NewSelfTreatmentDto();

    private async Task ShowNewExerciseDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            CloseButton = true,
        };

        var dialog = await DialogService.ShowAsync<AddExerciseToTreatment>("Add Exercise", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data.As<NewTreatmentExerciseDto>();
            Console.WriteLine($"Appending new exercise: {data.Title}");
            _selfTreatment.Exercises.Add(data);
        }
    }

    private void SaveAndReturn()
    {
        MudDialog.Close(DialogResult.Ok(_selfTreatment));
    }
}