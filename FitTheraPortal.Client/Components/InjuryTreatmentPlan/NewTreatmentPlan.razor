@using System.Runtime.CompilerServices
@using FitTheraPortal.Client.Components.SelfTreatment
@using FitTheraPortal.Client.DataServices.Interfaces
@using FitTheraPortal.Client.Dtos.CreateItems
@using MudBlazor.Extensions

@inject IDialogService DialogService
@inject IInjuryTreatmentPlanDataService PlanService

<label>Start Date</label>
<br />
<input type="date" @bind-value="_treatmentPlan.StartDate" />

<label>End Date</label>
<br />
<input type="date" @bind-value="_treatmentPlan.EndDate" />

<b>Self Treatments</b>
@foreach (var treatment in _treatmentPlan.SelfTreatments)
{
    <div>@treatment.Title</div>
}

<button class="btn btn-secondary" @onclick="ShowNewTreatmentDialog">Add Self Treatment</button>

<MudButton Color="Color.Primary" OnClick="SaveTreatmentPlan">Save</MudButton>

@code {
    [Parameter]
    public Guid InjuryId { get; set; }
    
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    public Guid TherapistId { get; set; } = new Guid("d1e1fd6a-7ab2-4017-97da-76323df438d0");

    private NewTreatmentPlanDto _treatmentPlan = default!;

    protected override void OnInitialized()
    {
        _treatmentPlan = new NewTreatmentPlanDto();
        _treatmentPlan.InjuryId = this.InjuryId;
        _treatmentPlan.TherapistId = this.TherapistId;
    }

    private async Task ShowNewTreatmentDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            CloseButton = true,
        };

        var dialog = await DialogService.ShowAsync<NewSelfTreatment>("New Self Treatment", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data.As<NewSelfTreatmentDto>();
            _treatmentPlan.SelfTreatments.Add(data);
        }
    }

    private async Task SaveTreatmentPlan()
    {
        await PlanService.AddNewTreatmentPlanAsync(_treatmentPlan);
        MudDialog.Close();
    }
}