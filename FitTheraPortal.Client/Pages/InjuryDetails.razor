@page "/InjuryDetails/{id:int}"
@using FitTheraPortal.Shared.Dtos

@inject HttpClient Http
@inject ISnackbar _snackbar

<h3>Injury  Details</h3>

@if (_isLoading)
{
    <p>Loading...</p>
}
else if (_hasError)
{
    <p>An error has occured. Check your route parameters. If those are right, I guess the server is down.</p>
}
else if (_injury == null)
{
    <p>No injury data found.</p>
}
else
{
    <h4 class="injury-name">@_injury.InjuryName</h4>
    <div class="injury-details">
        <p><strong>Patient ID:</strong> @_injury.PatientId</p>
        <p><strong>Therapist ID:</strong> @_injury.TherapistId</p>
        <p><strong>Injury Description:</strong> @_injury.InjuryDescription</p>
        <p><strong>Date Injured:</strong> @_injury.DateInjured?.ToString("MM/dd/yyyy")</p>
        <p><strong>Date OK:</strong> @_injury.DateOk?.ToString("MM/dd/yyyy")</p>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private InjuryDto? _injury;
    private bool _isLoading = true;
    private bool _hasError = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CheckForRouteErrors();

        if (!_hasError)
        {
            await GetInjuryDetails();
        }
    }

    private async Task GetInjuryDetails()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<InjuryDto>($"api/injury/{Id}");

            if (response != null)
            {
                _injury = response;
                _isLoading = false;
            }
        }
        catch (Exception ex)
        {
            _hasError = true;
            _snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void CheckForRouteErrors()
    {
        _hasError = (Id == null);
    }
}