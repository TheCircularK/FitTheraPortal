@page "/PatientDetails/{PatientId:int}"
@using System.Net
@using FitTheraPortal.Shared.Models
@using FitTheraPortal.Client.Components.Injury

@inject HttpClient Http
@inject ISnackbar Snackbar

<h3>Patient Details</h3>

@if (_hasError)
{
    <div style="color: red">Invalid route.</div>
}
else if (_patient == null)
{
    <div>Loading...</div>
}
else
{
    <h5>Current Injuries</h5>
    @foreach (var injury in _currentInjuries)
    {
        <InjuryOverview Injury="injury"></InjuryOverview>
    }
    
    <h5>Past Injuries</h5>
    @foreach (var injury in _pastInjuries)
    {
        <InjuryOverview Injury="injury"></InjuryOverview>
    }
}

@code {
    [Parameter]
    public int? PatientId { get; set; }
    private bool _hasError = false;
    private bool _isLoading = true;
    private Patient? _patient;
    private List<InjuryDto> _currentInjuries = new List<InjuryDto>();
    private List<InjuryDto> _pastInjuries = new List<InjuryDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hasError = AreRouteParamsValid();

        if (!_hasError)
        {
            FetchPatientInfo();
            await FetchCurrentInjuries();
            await FetchPastInjuries();
        }
        
        Snackbar.Add("Remember to figure out the whole health data thing!", Severity.Info);
    }

    private bool AreRouteParamsValid()
    {
        return PatientId == null;
    }

    private void FetchPatientInfo()
    {
        _patient = new Patient();
    }

    private async Task FetchCurrentInjuries()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<InjuryDto>>($"api/injury/{PatientId}/injuries/current");

            if (response != null)
            {
                _currentInjuries = response;
                _isLoading = false;
            }
            else
            {
                _hasError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _hasError = true;
        }
        
    }

    private async Task FetchPastInjuries()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<InjuryDto>>($"api/injury/{PatientId}/injuries/past");

            if (response != null)
            {
                _currentInjuries = response;
                _isLoading = false;
            }
            else
            {
                _hasError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            _hasError = true;
        }
    }
}